\documentclass[12pt, a4paper, oneside]{article} % Paper size, default font size and one-sided paper
%\graphicspath{{./Figures/}} % Specifies the directory where pictures are stored
%\usepackage[dcucite]{harvard}
\usepackage{amsmath}
\usepackage{setspace}
\usepackage{pdflscape}
\usepackage{rotating}
\usepackage[flushleft]{threeparttable}
\usepackage{multirow}
\usepackage[comma, sort&compress]{natbib}% Use the natbib reference package - read up on this to edit the reference style; if you want text (e.g. Smith et al., 2012) for the in-text references (instead of numbers), remove 'numbers' 
\usepackage{graphicx}
%\bibliographystyle{plainnat}
\bibliographystyle{agsm}
\usepackage[colorlinks = true, citecolor = blue, linkcolor = blue]{hyperref}
%\hypersetup{urlcolor=blue, colorlinks=true} % Colors hyperlinks in blue - change to black if annoying
%\renewcommand[\harvardurl]{URL: \url}
\usepackage{listings}
\usepackage{color}
\definecolor{mygrey}{gray}{0.95}
\lstset{backgroundcolor=\color{mygrey}}
\begin{document}
\title{Data Science and R Programming}
\author{Rob Hayward}
\date{\today}
\maketitle
\subsection*{Introduction}

This is an introduction to data science and R programming. There are two Coursera courses.  The main clasess can be found \href{https://www.coursera.org/course/datascitoolbox}{Data science toolkit} and \href{https://class.coursera.org/rprog-004}{R Programming}.  

\subsection{Git}
Some rules for adding files
\begin{itemize}
\item git add . adds all new files
\item git add -u updates tracking for files that were changed or deleted
\item git add -A all new files and all changes.
\end{itemize}

If you try to mix different classes in a vector, R will coerce to the lowest common denominator. For example, if you mix numeric and character, you will get two characters; if you try to mix logical and numeric, you will get numeric, if you try to mix logical and character, you will get character. 

A list is a special object.  It can change class.  
<<list>>=
x <- list(1, "a", TRUE, 1 + 4i)
x
@
The elements are indexed by double brackets.  

\subsection{Factors}
Factors are integer vectors with a label. The level is determined by alphabetical order.  Table can be used on factors. "Unclass" will strip the class and take the factor down to an integer. The levels can be set using "level" argument. Elements of an object can usually be named with "name". Lists and matrices can have names.

\subsection{Subsetting}
There are a number of ways to sub-set
\begin{itemize}
\item \lstinline{[} always returns an object of the same class as the original.  Can select more than one element. 
\item \lstinline{[[} is used to extract elements of a list or data frame.  Can only extract a single element and the class may not be an element or a dataframe. 
\item \lstinline{$} used to extract named elements of a list or data frame.  Same attributes as above.
\end{itemize}
Subsetting a matrix will usually return a vector. However, a matrix can be returned by setting \lstinline{drop = FALSE}. This can be important if taking a column of a matrix.  You will get a vector rather than a matrix unless you set \lstinline{drop = FALSE}

<<list2>>=
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
@
The \lstinline{[[]]} can be used with computed indices. 
<<list3>>=
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"
x[[name]]
x$name
x$foo
@
<<list4>>=
x <- list(a = list(10, 12, 14), b = c(3.14, 2.18))
x[[c(1, 2)]]
x[[1]][[3]]
x[[c(2, 1)]]
@ 

\subsection{reading data}
One way to speed up reading of large files is to read a small amount and to then create a vector with the column classes to input into the \lstinline{colClasses} section. 

\begin{lstlisting}
initial <- read.table("datatable.txt", nrows = 100)
classes <- sapply(initial, class)
tabAll <- readtable("datatable.txt", colClasses = classes)
\end{lstlisting}

Interfaces with the outside world
\begin{itemize}
\item \lstinline{file} connection to a file
\item \lstinline{gzfile} connection to a gzip compression
\item \lstinline{bzfile} connection to a bzip2 compression
\item \lstinline{url} connection to a web page
\end{itemize}

\subsection{Control Structures}
\begin{itemize}
\item \lstinline{if, else}: testing a condition
\item \lstinline{for}: executing a loop a fixed number of times
\item \lstinline{while}: executing a loop \emph{while} a condition is in place
\item \lstinline{repeat} execute an infinite loop
\item \lstinline{breat}: break the execution of a loop
\item \lstinline{next}: skip an iteration of a loop
\item \lstinline{return}: exit function
\end{itemize}

Nexted loops are inside each other. These are usually going to be used with things like matrices. 

\begin{lstlisting}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
  for(j in seq_len(ncol(x))) {
    print(x[i,j])
  }
}
\end{lstlisting}

As another example that will keep flipping a coin until the score goes above or below a number. 

\begin{lstlisting}
z <- 5
while(z >= 3 && z <=10) {
  print(z)
  coin <- rbinm(1, 1, 0.5)
  
  if(coin ==1) { ## randomm walk
    z <- z + 1
  } else {
    z <- z -1
  }
}
\end{lstlisting}

Repeat could be used for running a loop until a certain tolerance is reached.  For example, 
\begin{lstlisting}
x0 <- 1
tol <- 1e-8

repeat {
    x1 computeEstimate()
    
    if(abs(x1 - x0) < tol) {
          break
    } else {
          x0 <- x1
    }
      
}
\end{lstlisting}

This is used in optimistation algorithms. Usually good to add a limit on the number of repeats. For example a loop. 

\section{Functions}
Create an object of a class \lstinline{function}
\emph{Lazy Evaluation} means that the arguments of the function are only evaluated as they are needed. If an artgument is not used or evaluated, there is no problem. However, if the function tries to perform some activity with an argument that does not exist (\lstinline{print} for example), it will throw an error. 

The  \lstinline{...}argument is used to repeated already existing argument defaults.  For example, to extend a copy of the \lstinline{plot} function, 

\begin{lstlisting}
myplot <- function(x, y, type = 'l', ...) {
  plot(x, y, type = type, ...)
}
\end{lstlisting}

They can also be used with generic functions to pass additional arguments to the function.  All elements that are named after the \lstinline{...} have to be named explicitly. 



\end{document}
